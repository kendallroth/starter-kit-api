{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Timestamp": {
				"type": "string",
				"format": "date-time",
				"description": "Stringified ISO timestamp"
			},
			"UUID": {
				"type": "string",
				"format": "uuid",
				"description": "Stringified UUIDv4",
				"pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
			},
			"AccountEntity": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"createdAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was created (ISO timestamp)"
					},
					"updatedAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was last updated (ISO timestamp)"
					},
					"email": {
						"type": "string",
						"description": "Account email",
						"format": "email"
					},
					"name": {
						"type": "string"
					},
					"verifiedAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true,
						"description": "When account was verified"
					}
				},
				"required": [
					"id",
					"createdAt",
					"email",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnauthorizedErrorResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AccountResponse": {
				"properties": {
					"email": {
						"type": "string",
						"description": "Account email",
						"format": "email"
					},
					"name": {
						"type": "string"
					},
					"verifiedAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true,
						"description": "When account was verified"
					},
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"createdAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was created (ISO timestamp)"
					},
					"updatedAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was last updated (ISO timestamp)"
					}
				},
				"required": [
					"email",
					"name",
					"id",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticationResponse": {
				"properties": {
					"account": {
						"$ref": "#/components/schemas/AccountResponse"
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"account",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AccountLoginBody": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TodoEntity": {
				"properties": {
					"id": {
						"$ref": "#/components/schemas/UUID"
					},
					"createdAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was created (ISO timestamp)"
					},
					"updatedAt": {
						"$ref": "#/components/schemas/Timestamp",
						"description": "When entity was last updated (ISO timestamp)"
					},
					"accountId": {
						"$ref": "#/components/schemas/UUID"
					},
					"text": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"dueAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					},
					"completedAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					},
					"starredAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"id",
					"createdAt",
					"accountId",
					"text"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pagination": {
				"description": "Page-based pagination metadata",
				"properties": {
					"page": {
						"type": "number",
						"format": "double",
						"description": "Current pagination page"
					},
					"size": {
						"type": "number",
						"format": "double",
						"description": "Page size"
					},
					"totalItems": {
						"type": "number",
						"format": "double",
						"description": "Total number of available items (ie. not just item count of current page!)"
					},
					"totalPages": {
						"type": "number",
						"format": "double",
						"description": "Total number of available pages"
					}
				},
				"required": [
					"page",
					"size",
					"totalItems",
					"totalPages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResult_TodoEntity_": {
				"description": "Paginated data with pagination info/links\n\nNOTE: Since class uses generics for tying 'data', multiple properties must be replicated for\n        Swagger documentation (since plugin does not pick up properly with generics).",
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/TodoEntity"
						},
						"type": "array"
					},
					"pagination": {
						"$ref": "#/components/schemas/Pagination",
						"description": "Result pagination information"
					}
				},
				"required": [
					"data",
					"pagination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NotFoundErrorResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationErrorResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"fields": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					}
				},
				"required": [
					"message",
					"fields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TodoUpdateBody": {
				"properties": {
					"text": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"dueAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					},
					"starredAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TodoCreateBody": {
				"properties": {
					"text": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"dueAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					},
					"starredAt": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Timestamp"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"text"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "starter-kit-api",
		"version": "1.0.0",
		"description": "Simple API for `starter-kit` projects",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Kendall Roth ",
			"email": "kendall@kendallroth.ca"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/account/current": {
			"get": {
				"operationId": "GetTodos",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountEntity"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Get authenticated user details",
				"tags": [
					"Account"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/account/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AuthenticationResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Authenticate user via credentials",
				"tags": [
					"Account"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AccountLoginBody"
							}
						}
					}
				}
			}
		},
		"/todo": {
			"get": {
				"operationId": "GetTodos",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResult_TodoEntity_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Get all of user's todos (supports filtering, sorting)",
				"tags": [
					"Todo"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateTodo",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodoEntity"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation errors",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Add a todo",
				"tags": [
					"Todo"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TodoCreateBody"
							}
						}
					}
				}
			}
		},
		"/todo/{id}": {
			"get": {
				"operationId": "GetTodo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodoEntity"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Get a todo",
				"tags": [
					"Todo"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateTodo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodoEntity"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundErrorResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation errors",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Update a todo",
				"tags": [
					"Todo"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TodoUpdateBody"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTodo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TodoEntity"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedErrorResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation errors",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								}
							}
						}
					}
				},
				"summary": "Remove a todo",
				"tags": [
					"Todo"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}